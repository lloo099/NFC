<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32L476RG_NUCLEO\STM32L476RG_NUCLEO_PollingTagDetectNdef.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32L476RG_NUCLEO\STM32L476RG_NUCLEO_PollingTagDetectNdef.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Oct 26 14:29:48 2021
<BR><P>
<H3>Maximum Stack Usage =          0 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>

<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[10b]">_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10b]">_Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[69]">BSP_SPI1_IRQ_Callback</a> from nucleo_l476rg_bus.o(i.BSP_SPI1_IRQ_Callback) referenced from nucleo_l476rg_bus.o(i.SPI1_MspInit)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4a]">COMP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[47]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[48]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[49]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[34]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[46]">DMA2_Channel5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel6_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32l4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[67]">HAL_SPI_AbortCpltCallback</a> from stm32l4xx_hal_spi.o(i.HAL_SPI_AbortCpltCallback) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[66]">HAL_SPI_ErrorCallback</a> from stm32l4xx_hal_spi.o(i.HAL_SPI_ErrorCallback) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[68]">HAL_SPI_MspInit</a> from stm32l4xx_hal_spi.o(i.HAL_SPI_MspInit) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[61]">HAL_SPI_RxCpltCallback</a> from stm32l4xx_hal_spi.o(i.HAL_SPI_RxCpltCallback) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[64]">HAL_SPI_RxHalfCpltCallback</a> from stm32l4xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[60]">HAL_SPI_TxCpltCallback</a> from stm32l4xx_hal_spi.o(i.HAL_SPI_TxCpltCallback) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[63]">HAL_SPI_TxHalfCpltCallback</a> from stm32l4xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[62]">HAL_SPI_TxRxCpltCallback</a> from stm32l4xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[65]">HAL_SPI_TxRxHalfCpltCallback</a> from stm32l4xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[58]">LCD_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4b]">LPTIM1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4c]">LPTIM2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[50]">LPUART1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32l4xx_it.o(i.PendSV_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[51]">QUADSPI_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[59]">RNG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[54]">SAI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[55]">SAI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3b]">SDMMC1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5f]">SPI1_MspDeInit</a> from nucleo_l476rg_bus.o(i.SPI1_MspDeInit) referenced from nucleo_l476rg_bus.o(i.BSP_SPI1_RegisterDefaultMspCallbacks)
 <LI><a href="#[5e]">SPI1_MspInit</a> from nucleo_l476rg_bus.o(i.SPI1_MspInit) referenced from nucleo_l476rg_bus.o(i.BSP_SPI1_RegisterDefaultMspCallbacks)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32l4xx_it.o(i.SVC_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[56]">SWPMI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[57]">TSC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[6a]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[6b]">iso15693PhyVCDCode1Of256</a> from rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of256) referenced from rfal_iso15693_2.o(i.iso15693VCDCode)
 <LI><a href="#[6c]">iso15693PhyVCDCode1Of4</a> from rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of4) referenced from rfal_iso15693_2.o(i.iso15693VCDCode)
 <LI><a href="#[5b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[79]">ndefEmptyTypeDump</a> from ndef_dump.o(i.ndefEmptyTypeDump) referenced from ndef_dump.o(.constdata)
 <LI><a href="#[6d]">ndefEmptyTypePayloadGetLength</a> from ndef_types_rtd.o(i.ndefEmptyTypePayloadGetLength) referenced from ndef_types_rtd.o(i.ndefEmptyType)
 <LI><a href="#[6e]">ndefEmptyTypePayloadItem</a> from ndef_types_rtd.o(i.ndefEmptyTypePayloadItem) referenced from ndef_types_rtd.o(i.ndefEmptyType)
 <LI><a href="#[81]">ndefEmptyTypeToRecord</a> from ndef_types_rtd.o(i.ndefEmptyTypeToRecord) referenced from ndef_types.o(.constdata)
 <LI><a href="#[7e]">ndefMediaVCardDump</a> from ndef_dump.o(i.ndefMediaVCardDump) referenced from ndef_dump.o(.constdata)
 <LI><a href="#[7f]">ndefMediaWifiDump</a> from ndef_dump.o(i.ndefMediaWifiDump) referenced from ndef_dump.o(.constdata)
 <LI><a href="#[80]">ndefRecordToEmptyType</a> from ndef_types_rtd.o(i.ndefRecordToEmptyType) referenced from ndef_types.o(.constdata)
 <LI><a href="#[88]">ndefRecordToRtdAar</a> from ndef_types_rtd.o(i.ndefRecordToRtdAar) referenced from ndef_types.o(.constdata)
 <LI><a href="#[82]">ndefRecordToRtdDeviceInfo</a> from ndef_types_rtd.o(i.ndefRecordToRtdDeviceInfo) referenced from ndef_types.o(.constdata)
 <LI><a href="#[84]">ndefRecordToRtdText</a> from ndef_types_rtd.o(i.ndefRecordToRtdText) referenced from ndef_types.o(.constdata)
 <LI><a href="#[86]">ndefRecordToRtdUri</a> from ndef_types_rtd.o(i.ndefRecordToRtdUri) referenced from ndef_types.o(.constdata)
 <LI><a href="#[8a]">ndefRecordToVCard</a> from ndef_types_mime.o(i.ndefRecordToVCard) referenced from ndef_types.o(.constdata)
 <LI><a href="#[8c]">ndefRecordToWifi</a> from ndef_type_wifi.o(i.ndefRecordToWifi) referenced from ndef_types.o(.constdata)
 <LI><a href="#[7d]">ndefRtdAarDump</a> from ndef_dump.o(i.ndefRtdAarDump) referenced from ndef_dump.o(.constdata)
 <LI><a href="#[89]">ndefRtdAarToRecord</a> from ndef_types_rtd.o(i.ndefRtdAarToRecord) referenced from ndef_types.o(.constdata)
 <LI><a href="#[7a]">ndefRtdDeviceInfoDump</a> from ndef_dump.o(i.ndefRtdDeviceInfoDump) referenced from ndef_dump.o(.constdata)
 <LI><a href="#[6f]">ndefRtdDeviceInfoPayloadGetLength</a> from ndef_types_rtd.o(i.ndefRtdDeviceInfoPayloadGetLength) referenced from ndef_types_rtd.o(i.ndefPayloadToRtdDeviceInfo)
 <LI><a href="#[70]">ndefRtdDeviceInfoToPayloadItem</a> from ndef_types_rtd.o(i.ndefRtdDeviceInfoToPayloadItem) referenced from ndef_types_rtd.o(i.ndefPayloadToRtdDeviceInfo)
 <LI><a href="#[83]">ndefRtdDeviceInfoToRecord</a> from ndef_types_rtd.o(i.ndefRtdDeviceInfoToRecord) referenced from ndef_types.o(.constdata)
 <LI><a href="#[7b]">ndefRtdTextDump</a> from ndef_dump.o(i.ndefRtdTextDump) referenced from ndef_dump.o(.constdata)
 <LI><a href="#[73]">ndefRtdTextPayloadGetLength</a> from ndef_types_rtd.o(i.ndefRtdTextPayloadGetLength) referenced from ndef_types_rtd.o(i.ndefRecordToRtdText)
 <LI><a href="#[73]">ndefRtdTextPayloadGetLength</a> from ndef_types_rtd.o(i.ndefRtdTextPayloadGetLength) referenced from ndef_types_rtd.o(i.ndefRtdText)
 <LI><a href="#[74]">ndefRtdTextToPayloadItem</a> from ndef_types_rtd.o(i.ndefRtdTextToPayloadItem) referenced from ndef_types_rtd.o(i.ndefRecordToRtdText)
 <LI><a href="#[74]">ndefRtdTextToPayloadItem</a> from ndef_types_rtd.o(i.ndefRtdTextToPayloadItem) referenced from ndef_types_rtd.o(i.ndefRtdText)
 <LI><a href="#[85]">ndefRtdTextToRecord</a> from ndef_types_rtd.o(i.ndefRtdTextToRecord) referenced from ndef_types.o(.constdata)
 <LI><a href="#[7c]">ndefRtdUriDump</a> from ndef_dump.o(i.ndefRtdUriDump) referenced from ndef_dump.o(.constdata)
 <LI><a href="#[75]">ndefRtdUriPayloadGetLength</a> from ndef_types_rtd.o(i.ndefRtdUriPayloadGetLength) referenced from ndef_types_rtd.o(i.ndefRtdUri)
 <LI><a href="#[76]">ndefRtdUriToPayloadItem</a> from ndef_types_rtd.o(i.ndefRtdUriToPayloadItem) referenced from ndef_types_rtd.o(i.ndefRtdUri)
 <LI><a href="#[87]">ndefRtdUriToRecord</a> from ndef_types_rtd.o(i.ndefRtdUriToRecord) referenced from ndef_types.o(.constdata)
 <LI><a href="#[98]">ndefT2TPollerBeginWriteMessage</a> from ndef_t2t.o(i.ndefT2TPollerBeginWriteMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[97]">ndefT2TPollerCheckAvailableSpace</a> from ndef_t2t.o(i.ndefT2TPollerCheckAvailableSpace) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[96]">ndefT2TPollerCheckPresence</a> from ndef_t2t.o(i.ndefT2TPollerCheckPresence) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[8e]">ndefT2TPollerContextInitialization</a> from ndef_t2t.o(i.ndefT2TPollerContextInitialization) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[99]">ndefT2TPollerEndWriteMessage</a> from ndef_t2t.o(i.ndefT2TPollerEndWriteMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[8f]">ndefT2TPollerNdefDetect</a> from ndef_t2t.o(i.ndefT2TPollerNdefDetect) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[90]">ndefT2TPollerReadBytes</a> from ndef_t2t.o(i.ndefT2TPollerReadBytes) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[91]">ndefT2TPollerReadRawMessage</a> from ndef_t2t.o(i.ndefT2TPollerReadRawMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[94]">ndefT2TPollerTagFormat</a> from ndef_t2t.o(i.ndefT2TPollerTagFormat) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[92]">ndefT2TPollerWriteBytes</a> from ndef_t2t.o(i.ndefT2TPollerWriteBytes) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[93]">ndefT2TPollerWriteRawMessage</a> from ndef_t2t.o(i.ndefT2TPollerWriteRawMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[95]">ndefT2TPollerWriteRawMessageLen</a> from ndef_t2t.o(i.ndefT2TPollerWriteRawMessageLen) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[a4]">ndefT3TPollerBeginWriteMessage</a> from ndef_t3t.o(i.ndefT3TPollerBeginWriteMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[a3]">ndefT3TPollerCheckAvailableSpace</a> from ndef_t3t.o(i.ndefT3TPollerCheckAvailableSpace) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[a2]">ndefT3TPollerCheckPresence</a> from ndef_t3t.o(i.ndefT3TPollerCheckPresence) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[9a]">ndefT3TPollerContextInitialization</a> from ndef_t3t.o(i.ndefT3TPollerContextInitialization) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[a5]">ndefT3TPollerEndWriteMessage</a> from ndef_t3t.o(i.ndefT3TPollerEndWriteMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[9b]">ndefT3TPollerNdefDetect</a> from ndef_t3t.o(i.ndefT3TPollerNdefDetect) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[9c]">ndefT3TPollerReadBytes</a> from ndef_t3t.o(i.ndefT3TPollerReadBytes) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[9d]">ndefT3TPollerReadRawMessage</a> from ndef_t3t.o(i.ndefT3TPollerReadRawMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[a0]">ndefT3TPollerTagFormat</a> from ndef_t3t.o(i.ndefT3TPollerTagFormat) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[9e]">ndefT3TPollerWriteBytes</a> from ndef_t3t.o(i.ndefT3TPollerWriteBytes) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[9f]">ndefT3TPollerWriteRawMessage</a> from ndef_t3t.o(i.ndefT3TPollerWriteRawMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[a1]">ndefT3TPollerWriteRawMessageLen</a> from ndef_t3t.o(i.ndefT3TPollerWriteRawMessageLen) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[b0]">ndefT4TPollerBeginWriteMessage</a> from ndef_t4t.o(i.ndefT4TPollerBeginWriteMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[af]">ndefT4TPollerCheckAvailableSpace</a> from ndef_t4t.o(i.ndefT4TPollerCheckAvailableSpace) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[ae]">ndefT4TPollerCheckPresence</a> from ndef_t4t.o(i.ndefT4TPollerCheckPresence) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[a6]">ndefT4TPollerContextInitialization</a> from ndef_t4t.o(i.ndefT4TPollerContextInitialization) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[b1]">ndefT4TPollerEndWriteMessage</a> from ndef_t4t.o(i.ndefT4TPollerEndWriteMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[a7]">ndefT4TPollerNdefDetect</a> from ndef_t4t.o(i.ndefT4TPollerNdefDetect) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[a8]">ndefT4TPollerReadBytes</a> from ndef_t4t.o(i.ndefT4TPollerReadBytes) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[a9]">ndefT4TPollerReadRawMessage</a> from ndef_t4t.o(i.ndefT4TPollerReadRawMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[ac]">ndefT4TPollerTagFormat</a> from ndef_t4t.o(i.ndefT4TPollerTagFormat) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[aa]">ndefT4TPollerWriteBytes</a> from ndef_t4t.o(i.ndefT4TPollerWriteBytes) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[ab]">ndefT4TPollerWriteRawMessage</a> from ndef_t4t.o(i.ndefT4TPollerWriteRawMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[ad]">ndefT4TPollerWriteRawMessageLen</a> from ndef_t4t.o(i.ndefT4TPollerWriteRawMessageLen) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[bc]">ndefT5TPollerBeginWriteMessage</a> from ndef_t5t.o(i.ndefT5TPollerBeginWriteMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[bb]">ndefT5TPollerCheckAvailableSpace</a> from ndef_t5t.o(i.ndefT5TPollerCheckAvailableSpace) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[ba]">ndefT5TPollerCheckPresence</a> from ndef_t5t.o(i.ndefT5TPollerCheckPresence) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[b2]">ndefT5TPollerContextInitialization</a> from ndef_t5t.o(i.ndefT5TPollerContextInitialization) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[bd]">ndefT5TPollerEndWriteMessage</a> from ndef_t5t.o(i.ndefT5TPollerEndWriteMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[b3]">ndefT5TPollerNdefDetect</a> from ndef_t5t.o(i.ndefT5TPollerNdefDetect) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[b4]">ndefT5TPollerReadBytes</a> from ndef_t5t.o(i.ndefT5TPollerReadBytes) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[b5]">ndefT5TPollerReadRawMessage</a> from ndef_t5t.o(i.ndefT5TPollerReadRawMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[b8]">ndefT5TPollerTagFormat</a> from ndef_t5t.o(i.ndefT5TPollerTagFormat) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[b6]">ndefT5TPollerWriteBytes</a> from ndef_t5t.o(i.ndefT5TPollerWriteBytes) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[b7]">ndefT5TPollerWriteRawMessage</a> from ndef_t5t.o(i.ndefT5TPollerWriteRawMessage) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[b9]">ndefT5TPollerWriteRawMessageLen</a> from ndef_t5t.o(i.ndefT5TPollerWriteRawMessageLen) referenced from ndef_poller.o(.constdata)
 <LI><a href="#[71]">ndefVCardPayloadGetLength</a> from ndef_types_mime.o(i.ndefVCardPayloadGetLength) referenced from ndef_types_mime.o(i.ndefPayloadToVcard)
 <LI><a href="#[72]">ndefVCardToPayloadItem</a> from ndef_types_mime.o(i.ndefVCardToPayloadItem) referenced from ndef_types_mime.o(i.ndefPayloadToVcard)
 <LI><a href="#[8b]">ndefVCardToRecord</a> from ndef_types_mime.o(i.ndefVCardToRecord) referenced from ndef_types.o(.constdata)
 <LI><a href="#[77]">ndefWifiPayloadGetLength</a> from ndef_type_wifi.o(i.ndefWifiPayloadGetLength) referenced from ndef_type_wifi.o(i.ndefWifi)
 <LI><a href="#[78]">ndefWifiToPayloadItem</a> from ndef_type_wifi.o(i.ndefWifiToPayloadItem) referenced from ndef_type_wifi.o(i.ndefWifi)
 <LI><a href="#[8d]">ndefWifiToRecord</a> from ndef_type_wifi.o(i.ndefWifiToRecord) referenced from ndef_types.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cf]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, uldiv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, memmovea.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerWriteSingleBlock
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedWriteSingleBlock
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerUpdate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenStartActivation
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartATTRIB
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeWriteDataODO
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeWriteData
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectFileV1Mapping
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectFile
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectAppl
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRWriteSingleBlock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadBytes
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBytes
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteBytes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadBytes
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBytes
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBytes
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordEncode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TReadAndParseCCFile
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadBlocks
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memmovea.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipConfig
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartPduTransceive
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToType
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdDeviceInfoDump
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaVCardTranslate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDiscover
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerTagFormat
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerContextInitialization
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerContextInitialization
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerCheckPresence
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerTagFormat
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerContextInitialization
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerContextInitialization
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToWifi
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToVCard
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdUri
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdText
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdDeviceInfo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TTransceiveTxRx
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memmovea.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeCAPDU
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartFullCollisionResolution
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comRx
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[c5]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[138]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaVCardTranslate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[129]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, memcmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetVCard
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaVCardDump
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaVCardTranslate
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerNdefDetect
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriProtocolAutodetect
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefVCardFindMarker
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefIsVCardTypeFound
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefTypeStringToTypeId
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c9]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[c8]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d0]"></a>BSP_GetTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nucleo_l476rg_bus.o(i.BSP_GetTick))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
</UL>

<P><STRONG><a name="[d2]"></a>BSP_PB_Init</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32l4xx_nucleo.o(i.BSP_PB_Init))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>BSP_SPI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nucleo_l476rg_bus.o(i.BSP_SPI1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>BSP_SPI1_IRQ_Callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nucleo_l476rg_bus.o(i.BSP_SPI1_IRQ_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nucleo_l476rg_bus.o(i.SPI1_MspInit)
</UL>
<P><STRONG><a name="[da]"></a>BSP_SPI1_Init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, nucleo_l476rg_bus.o(i.BSP_SPI1_Init))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_RegisterDefaultMspCallbacks
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>BSP_SPI1_RegisterDefaultMspCallbacks</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nucleo_l476rg_bus.o(i.BSP_SPI1_RegisterDefaultMspCallbacks))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[e0]"></a>BSP_SPI1_SendRecv</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, nucleo_l476rg_bus.o(i.BSP_SPI1_SendRecv))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comRx
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedNotificationWriteDone
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerTagFormat
</UL>

<P><STRONG><a name="[106]"></a>HAL_EXTI_GetHandle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_exti.o(i.HAL_EXTI_GetHandle))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspInit
</UL>

<P><STRONG><a name="[d8]"></a>HAL_EXTI_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l4xx_hal_exti.o(i.HAL_EXTI_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>HAL_EXTI_RegisterCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_exti.o(i.HAL_EXTI_RegisterCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspInit
</UL>

<P><STRONG><a name="[105]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 320 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspDeInit
</UL>

<P><STRONG><a name="[d4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 414 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[117]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkUserButton
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
</UL>

<P><STRONG><a name="[102]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_Toggle
</UL>

<P><STRONG><a name="[ff]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledsOn
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledsOff
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_OFF
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_Init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtWrReg
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtIrq
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtCmd
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledInit
</UL>

<P><STRONG><a name="[d1]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>

<P><STRONG><a name="[109]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e4]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e7]"></a>HAL_MspInit</STRONG> (Thumb, 358 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspDeInit
</UL>

<P><STRONG><a name="[d6]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e5]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[10c]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[103]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[10d]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ea]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 928 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ed]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10e]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[dd]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ee]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ef]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1242 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[67]"></a>HAL_SPI_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_AbortCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[66]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[db]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_SPI_Init</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[68]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[df]"></a>HAL_SPI_RegisterCallback</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_RegisterCallback))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_RegisterDefaultMspCallbacks
</UL>

<P><STRONG><a name="[61]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[64]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[e2]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 842 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
</UL>

<P><STRONG><a name="[60]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[63]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[62]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[65]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[e8]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f3]"></a>HAL_UART_Init</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartInit
</UL>

<P><STRONG><a name="[f4]"></a>HAL_UART_MspInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_UART_Transmit</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartTx
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>MX_SPI1_Init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nucleo_l476rg_bus.o(i.MX_SPI1_Init))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>NFC06A1_LED_Init</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, nfc06a1.o(i.NFC06A1_LED_Init))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>NFC06A1_LED_OFF</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nfc06a1.o(i.NFC06A1_LED_OFF))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>NFC06A1_LED_Toggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nfc06a1.o(i.NFC06A1_LED_Toggle))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>SystemClock_Config</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(i.SystemClock_Config))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f7]"></a>UART_CheckIdleState</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f5]"></a>UART_SetConfig</STRONG> (Thumb, 622 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f9]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
</UL>

<P><STRONG><a name="[10f]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[154]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[11a]"></a>demoCycle</STRONG> (Thumb, 874 bytes, Stack size 0 bytes, ndef_demo.o(i.demoCycle))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcGetState
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcGetActiveDevice
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDiscover
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledsOn
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledsOff
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkUserButton
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>demoIni</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, ndef_demo.o(i.demoIni))
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcInitialize
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>demoTransceiveBlocking</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ndef_demo.o(i.demoTransceiveBlocking))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
</UL>

<P><STRONG><a name="[121]"></a>hex2Str</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, logger.o(i.hex2Str))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[256]"></a>iso15693PhyConfigure</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rfal_iso15693_2.o(i.iso15693PhyConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[144]"></a>iso15693VCDCode</STRONG> (Thumb, 402 bytes, Stack size 0 bytes, rfal_iso15693_2.o(i.iso15693VCDCode))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[146]"></a>iso15693VICCDecode</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, rfal_iso15693_2.o(i.iso15693VICCDecode))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[118]"></a>logUsart</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, logger.o(i.logUsart))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartTx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextDump
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdDeviceInfoDump
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaWifiDump
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaVCardDump
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefEmptyTypeDump
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferPrint
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDumpLine
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDump
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDump
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TCCDump
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TCCDump
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefDumpSysInfo
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefCCDump
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkUserButton
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>logUsartInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, logger.o(i.logUsartInit))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>logUsartTx</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, logger.o(i.logUsartTx))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_Toggle
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_OFF
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[157]"></a>ndefBuffer8Print</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefBuffer8Print))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextDump
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
</UL>

<P><STRONG><a name="[134]"></a>ndefBufferDump</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefBufferDump))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDumpLine
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaWifiDump
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TCCDump
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TCCDump
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefCCDump
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[158]"></a>ndefBufferPrint</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefBufferPrint))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriDump
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextDump
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAarDump
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaVCardDump
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBuffer8Print
</UL>

<P><STRONG><a name="[17e]"></a>ndefEmptyType</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefEmptyType))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToEmptyType
</UL>

<P><STRONG><a name="[79]"></a>ndefEmptyTypeDump</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefEmptyTypeDump))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>ndefEmptyTypeToRecord</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefEmptyTypeToRecord))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetNdefType
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>ndefGetRtdAar</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefGetRtdAar))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAarDump
</UL>

<P><STRONG><a name="[184]"></a>ndefGetRtdDeviceInfo</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefGetRtdDeviceInfo))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdDeviceInfoDump
</UL>

<P><STRONG><a name="[185]"></a>ndefGetRtdText</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefGetRtdText))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextDump
</UL>

<P><STRONG><a name="[187]"></a>ndefGetRtdUri</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefGetRtdUri))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriDump
</UL>

<P><STRONG><a name="[15e]"></a>ndefGetVCard</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, ndef_types_mime.o(i.ndefGetVCard))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaVCardDump
</UL>

<P><STRONG><a name="[162]"></a>ndefGetWifi</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ndef_type_wifi.o(i.ndefGetWifi))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaWifiDump
</UL>

<P><STRONG><a name="[7e]"></a>ndefMediaVCardDump</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefMediaVCardDump))
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetVCard
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferPrint
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaVCardTranslate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>ndefMediaWifiDump</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefMediaWifiDump))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetWifi
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDump
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>ndefMessageAppend</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ndef_message.o(i.ndefMessageAppend))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDecode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[135]"></a>ndefMessageDecode</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, ndef_message.o(i.ndefMessageDecode))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageAppend
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetLength
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[136]"></a>ndefMessageDump</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefMessageDump))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[13c]"></a>ndefMessageEncode</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ndef_message.o(i.ndefMessageEncode))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordEncode
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[166]"></a>ndefMessageGetInfo</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ndef_message.o(i.ndefMessageGetInfo))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageEncode
</UL>

<P><STRONG><a name="[137]"></a>ndefMessageInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ndef_message.o(i.ndefMessageInit))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDecode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[16e]"></a>ndefPollerBeginWriteMessage</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ndef_poller.o(i.ndefPollerBeginWriteMessage))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
</UL>

<P><STRONG><a name="[16d]"></a>ndefPollerCheckAvailableSpace</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ndef_poller.o(i.ndefPollerCheckAvailableSpace))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
</UL>

<P><STRONG><a name="[12f]"></a>ndefPollerContextInitialization</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ndef_poller.o(i.ndefPollerContextInitialization))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[173]"></a>ndefPollerEndWriteMessage</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ndef_poller.o(i.ndefPollerEndWriteMessage))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
</UL>

<P><STRONG><a name="[131]"></a>ndefPollerNdefDetect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ndef_poller.o(i.ndefPollerNdefDetect))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[133]"></a>ndefPollerReadRawMessage</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ndef_poller.o(i.ndefPollerReadRawMessage))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[140]"></a>ndefPollerTagFormat</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ndef_poller.o(i.ndefPollerTagFormat))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[170]"></a>ndefPollerWriteBytes</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ndef_poller.o(i.ndefPollerWriteBytes))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
</UL>

<P><STRONG><a name="[13b]"></a>ndefPollerWriteMessage</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, ndef_poller.o(i.ndefPollerWriteMessage))
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteBytes
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerEndWriteMessage
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerCheckAvailableSpace
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerBeginWriteMessage
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayloadLength
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayloadItem
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordEncodeHeader
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[13f]"></a>ndefPollerWriteRawMessage</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ndef_poller.o(i.ndefPollerWriteRawMessage))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[164]"></a>ndefRecordDecode</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordDecode))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDecode
</UL>

<P><STRONG><a name="[165]"></a>ndefRecordDump</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefRecordDump))
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetType
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayload
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetId
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDumpType
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBuffer8Print
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDump
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDump
</UL>

<P><STRONG><a name="[174]"></a>ndefRecordDumpType</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefRecordDumpType))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToType
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
</UL>

<P><STRONG><a name="[167]"></a>ndefRecordEncode</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordEncode))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayloadLength
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayloadItem
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordEncodeHeader
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetLength
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageEncode
</UL>

<P><STRONG><a name="[16f]"></a>ndefRecordEncodeHeader</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordEncodeHeader))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayloadLength
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordEncode
</UL>

<P><STRONG><a name="[179]"></a>ndefRecordGetHeaderLength</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordGetHeaderLength))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetLength
</UL>

<P><STRONG><a name="[176]"></a>ndefRecordGetId</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordGetId))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
</UL>

<P><STRONG><a name="[163]"></a>ndefRecordGetLength</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordGetLength))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayloadLength
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetHeaderLength
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDecode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageAppend
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordEncode
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageGetInfo
</UL>

<P><STRONG><a name="[17f]"></a>ndefRecordGetNdefType</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ndef_types.o(i.ndefRecordGetNdefType))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToType
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToWifi
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToVCard
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdUri
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdText
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdDeviceInfo
</UL>

<P><STRONG><a name="[177]"></a>ndefRecordGetPayload</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordGetPayload))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayloadLength
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayloadItem
</UL>

<P><STRONG><a name="[172]"></a>ndefRecordGetPayloadItem</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordGetPayloadItem))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordEncode
</UL>

<P><STRONG><a name="[171]"></a>ndefRecordGetPayloadLength</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordGetPayloadLength))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayload
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetNdefType
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordEncodeHeader
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetLength
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordEncode
</UL>

<P><STRONG><a name="[175]"></a>ndefRecordGetType</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordGetType))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeStringToTypeId
</UL>

<P><STRONG><a name="[15c]"></a>ndefRecordReset</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordReset))
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetType
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetPayload
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetId
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriToRecord
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextToRecord
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAarToRecord
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefWifiToRecord
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefVCardToRecord
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdDeviceInfoToRecord
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefEmptyTypeToRecord
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDecode
</UL>

<P><STRONG><a name="[17b]"></a>ndefRecordSetId</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordSetId))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>

<P><STRONG><a name="[15d]"></a>ndefRecordSetNdefType</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ndef_types.o(i.ndefRecordSetNdefType))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayloadLength
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriToRecord
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextToRecord
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefWifiToRecord
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefVCardToRecord
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdDeviceInfoToRecord
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefEmptyTypeToRecord
</UL>

<P><STRONG><a name="[17c]"></a>ndefRecordSetPayload</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordSetPayload))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAarToRecord
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>

<P><STRONG><a name="[17a]"></a>ndefRecordSetType</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordSetType))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriToRecord
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextToRecord
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAarToRecord
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefWifiToRecord
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefVCardToRecord
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdDeviceInfoToRecord
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>

<P><STRONG><a name="[80]"></a>ndefRecordToEmptyType</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRecordToEmptyType))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefEmptyType
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>ndefRecordToRtdAar</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRecordToRtdAar))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAar
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>ndefRecordToRtdDeviceInfo</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRecordToRtdDeviceInfo))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPayloadToRtdDeviceInfo
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetNdefType
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>ndefRecordToRtdText</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRecordToRtdText))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetNdefType
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>ndefRecordToRtdUri</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRecordToRtdUri))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUri
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetNdefType
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>ndefRecordToType</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, ndef_types.o(i.ndefRecordToType))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeStringToTypeId
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetNdefType
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDumpType
</UL>

<P><STRONG><a name="[8a]"></a>ndefRecordToVCard</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ndef_types_mime.o(i.ndefRecordToVCard))
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPayloadToVcard
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetNdefType
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>ndefRecordToWifi</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ndef_type_wifi.o(i.ndefRecordToWifi))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetNdefType
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPayloadToWifi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>ndefRecordTypeMatch</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ndef_record.o(i.ndefRecordTypeMatch))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToWifi
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToVCard
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdUri
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdText
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdDeviceInfo
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdAar
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToEmptyType
</UL>

<P><STRONG><a name="[181]"></a>ndefRecordTypeStringToTypeId</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ndef_types.o(i.ndefRecordTypeStringToTypeId))
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetType
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefTypeStringToTypeId
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToType
</UL>

<P><STRONG><a name="[13e]"></a>ndefRtdAar</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdAar))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdAar
</UL>

<P><STRONG><a name="[7d]"></a>ndefRtdAarDump</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefRtdAarDump))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetRtdAar
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>ndefRtdAarToRecord</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdAarToRecord))
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetType
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetPayload
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>ndefRtdDeviceInfoDump</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefRtdDeviceInfoDump))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetRtdDeviceInfo
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>ndefRtdDeviceInfoToRecord</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdDeviceInfoToRecord))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetNdefType
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetType
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>ndefRtdText</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdText))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[7b]"></a>ndefRtdTextDump</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefRtdTextDump))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetRtdText
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferPrint
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBuffer8Print
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>ndefRtdTextToRecord</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdTextToRecord))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetNdefType
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetType
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>ndefRtdUri</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdUri))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriProtocolAutodetect
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdUri
</UL>

<P><STRONG><a name="[7c]"></a>ndefRtdUriDump</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefRtdUriDump))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetRtdUri
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>ndefRtdUriToRecord</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdUriToRecord))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetNdefType
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetType
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>ndefT2TPollerBeginWriteMessage</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerBeginWriteMessage))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteRawMessageLen
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>ndefT2TPollerCheckAvailableSpace</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerCheckAvailableSpace))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>ndefT2TPollerCheckPresence</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerCheckPresence))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>ndefT2TPollerContextInitialization</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerContextInitialization))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>ndefT2TPollerEndWriteMessage</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerEndWriteMessage))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteRawMessageLen
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>ndefT2TPollerNdefDetect</STRONG> (Thumb, 358 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerNdefDetect))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>ndefT2TPollerReadBytes</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerReadBytes))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBlock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerTagFormat
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadRawMessage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerNdefDetect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>ndefT2TPollerReadRawMessage</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerReadRawMessage))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>ndefT2TPollerTagFormat</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerTagFormat))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBlock
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>ndefT2TPollerWriteBytes</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerWriteBytes))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBlock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteRawMessageLen
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>ndefT2TPollerWriteRawMessage</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerWriteRawMessage))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBytes
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerEndWriteMessage
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerCheckAvailableSpace
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerBeginWriteMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>ndefT2TPollerWriteRawMessageLen</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerWriteRawMessageLen))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerEndWriteMessage
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerBeginWriteMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>ndefT3TPollerBeginWriteMessage</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerBeginWriteMessage))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteAttributeInformationBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>ndefT3TPollerCheckAvailableSpace</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerCheckAvailableSpace))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>ndefT3TPollerCheckPresence</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerCheckPresence))
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>ndefT3TPollerContextInitialization</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerContextInitialization))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>ndefT3TPollerEndWriteMessage</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerEndWriteMessage))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteAttributeInformationBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteRawMessageLen
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>ndefT3TPollerNdefDetect</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerNdefDetect))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadAttributeInformationBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>ndefT3TPollerReadBytes</STRONG> (Thumb, 332 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerReadBytes))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>ndefT3TPollerReadRawMessage</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerReadRawMessage))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>ndefT3TPollerTagFormat</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerTagFormat))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteAttributeInformationBlock
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadAttributeInformationBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>ndefT3TPollerWriteBytes</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerWriteBytes))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteBlocks
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>ndefT3TPollerWriteRawMessage</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerWriteRawMessage))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteBytes
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerEndWriteMessage
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerCheckAvailableSpace
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerBeginWriteMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>ndefT3TPollerWriteRawMessageLen</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerWriteRawMessageLen))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerEndWriteMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>ndefT4TPollerBeginWriteMessage</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerBeginWriteMessage))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessageLen
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>ndefT4TPollerCheckAvailableSpace</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerCheckAvailableSpace))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>ndefT4TPollerCheckPresence</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerCheckPresence))
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeReadData
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TInitializeIsoDepTxRxParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>ndefT4TPollerContextInitialization</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerContextInitialization))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>ndefT4TPollerEndWriteMessage</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerEndWriteMessage))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessageLen
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>ndefT4TPollerNdefDetect</STRONG> (Thumb, 272 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerNdefDetect))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectNdefTagApplication
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TReadAndParseCCFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>ndefT4TPollerReadBinary</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerReadBinary))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeReadData
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TTransceiveTxRx
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TInitializeIsoDepTxRxParam
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBytes
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerNdefDetect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TReadAndParseCCFile
</UL>

<P><STRONG><a name="[19d]"></a>ndefT4TPollerReadBinaryODO</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerReadBinaryODO))
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeReadDataODO
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TTransceiveTxRx
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TInitializeIsoDepTxRxParam
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBytes
</UL>

<P><STRONG><a name="[a8]"></a>ndefT4TPollerReadBytes</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerReadBytes))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinaryODO
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>ndefT4TPollerReadRawMessage</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerReadRawMessage))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[19a]"></a>ndefT4TPollerSelectFile</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerSelectFile))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectFileV1Mapping
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectFile
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TTransceiveTxRx
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TInitializeIsoDepTxRxParam
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerTagFormat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerNdefDetect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TReadAndParseCCFile
</UL>

<P><STRONG><a name="[198]"></a>ndefT4TPollerSelectNdefTagApplication</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerSelectNdefTagApplication))
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectAppl
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TTransceiveTxRx
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TInitializeIsoDepTxRxParam
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerTagFormat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerNdefDetect
</UL>

<P><STRONG><a name="[ac]"></a>ndefT4TPollerTagFormat</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerTagFormat))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBytes
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectNdefTagApplication
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TReadAndParseCCFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>ndefT4TPollerWriteBinary</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerWriteBinary))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeWriteData
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TTransceiveTxRx
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TInitializeIsoDepTxRxParam
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBytes
</UL>

<P><STRONG><a name="[1a4]"></a>ndefT4TPollerWriteBinaryODO</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerWriteBinaryODO))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeWriteDataODO
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TTransceiveTxRx
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TInitializeIsoDepTxRxParam
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBytes
</UL>

<P><STRONG><a name="[aa]"></a>ndefT4TPollerWriteBytes</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerWriteBytes))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinaryODO
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessageLen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerTagFormat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>ndefT4TPollerWriteRawMessage</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerWriteRawMessage))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBytes
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerEndWriteMessage
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerCheckAvailableSpace
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerBeginWriteMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>ndefT4TPollerWriteRawMessageLen</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TPollerWriteRawMessageLen))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerEndWriteMessage
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerBeginWriteMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>ndefT5TPollerBeginWriteMessage</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerBeginWriteMessage))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteRawMessageLen
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>ndefT5TPollerCheckAvailableSpace</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerCheckAvailableSpace))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>ndefT5TPollerCheckPresence</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerCheckPresence))
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadSingleBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>ndefT5TPollerContextInitialization</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerContextInitialization))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerSelect
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadSingleBlock
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TGetSystemInformation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>ndefT5TPollerEndWriteMessage</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerEndWriteMessage))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteRawMessageLen
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>ndefT5TPollerNdefDetect</STRONG> (Thumb, 536 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerNdefDetect))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>ndefT5TPollerReadBytes</STRONG> (Thumb, 336 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerReadBytes))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadSingleBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadRawMessage
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerNdefDetect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>ndefT5TPollerReadRawMessage</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerReadRawMessage))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>ndefT5TPollerTagFormat</STRONG> (Thumb, 310 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerTagFormat))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TWriteCC
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadMultipleBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>ndefT5TPollerWriteBytes</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerWriteBytes))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteSingleBlock
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadSingleBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteRawMessageLen
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteRawMessage
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerTagFormat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TWriteCC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>ndefT5TPollerWriteRawMessage</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerWriteRawMessage))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerEndWriteMessage
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerCheckAvailableSpace
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerBeginWriteMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>ndefT5TPollerWriteRawMessageLen</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerWriteRawMessageLen))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerEndWriteMessage
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerBeginWriteMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>ndefVCardToRecord</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ndef_types_mime.o(i.ndefVCardToRecord))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetNdefType
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetType
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>ndefWifi</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ndef_type_wifi.o(i.ndefWifi))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPayloadToWifi
</UL>

<P><STRONG><a name="[8d]"></a>ndefWifiToRecord</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ndef_type_wifi.o(i.ndefWifiToRecord))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetNdefType
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetType
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.constdata)
</UL>
<P><STRONG><a name="[229]"></a>rfalAnalogConfigInitialize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_analogconfig.o(i.rfalAnalogConfigInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcInitialize
</UL>

<P><STRONG><a name="[1c5]"></a>rfalCalibrate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalCalibrate))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916AdjustRegulators
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[1c8]"></a>rfalChipChangeRegBits</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalChipChangeRegBits))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916IsRegValid
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[1cb]"></a>rfalChipChangeTestRegBits</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalChipChangeTestRegBits))
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeTestRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[145]"></a>rfalCrcCalculateCcitt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rfal_crc.o(i.rfalCrcCalculateCcitt))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VCDCode
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[1d7]"></a>rfalFeliCaPoll</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalFeliCaPoll))
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
</UL>

<P><STRONG><a name="[1da]"></a>rfalFieldOff</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalFieldOff))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[1dc]"></a>rfalFieldOnAndStartGT</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalFieldOnAndStartGT))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBGetActivationStatus
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[223]"></a>rfalGetBitRate</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalGetBitRate))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[1ff]"></a>rfalGetFDTPoll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalGetFDTPoll))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[149]"></a>rfalGetTransceiveStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalGetTransceiveStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenGetActivationStatus
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetRATSStatus
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetPPSSTatus
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetATTRIBStatus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>

<P><STRONG><a name="[1df]"></a>rfalISO14443ATransceiveAnticollisionFrame</STRONG> (Thumb, 338 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalISO14443ATransceiveAnticollisionFrame))
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
</UL>

<P><STRONG><a name="[1e5]"></a>rfalISO14443ATransceiveShortFrame</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalISO14443ATransceiveShortFrame))
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetStartGPTimer
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetNoResponseTime
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartFullCollisionResolution
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>

<P><STRONG><a name="[1ec]"></a>rfalISO15693TransceiveAnticollisionFrame</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalISO15693TransceiveAnticollisionFrame))
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOFAnticollision
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
</UL>

<P><STRONG><a name="[1ed]"></a>rfalISO15693TransceiveEOF</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalISO15693TransceiveEOF))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[1ef]"></a>rfalISO15693TransceiveEOFAnticollision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalISO15693TransceiveEOFAnticollision))
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[1f0]"></a>rfalInitialize</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearInterrupts
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcInitialize
</UL>

<P><STRONG><a name="[1f3]"></a>rfalIsExtFieldOn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalIsExtFieldOn))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[1e6]"></a>rfalIsGTExpired</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalIsGTExpired))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[150]"></a>rfalIsTransceiveInRx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalIsTransceiveInRx))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>

<P><STRONG><a name="[260]"></a>rfalIsTransceiveInTx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalIsTransceiveInTx))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>

<P><STRONG><a name="[124]"></a>rfalIsoDepDeselect</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepDeselect))
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[1f7]"></a>rfalIsoDepFSxI2FSx</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepFSxI2FSx))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenStartActivation
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetRATSStatus
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetATTRIBStatus
</UL>

<P><STRONG><a name="[14f]"></a>rfalIsoDepFWI2FWT</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepFWI2FWT))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenStartActivation
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[197]"></a>rfalIsoDepGetApduTransceiveStatus</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepGetApduTransceiveStatus))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerCheckPresence
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TTransceiveTxRx
</UL>

<P><STRONG><a name="[1f5]"></a>rfalIsoDepGetMaxInfLen</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepGetMaxInfLen))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
</UL>

<P><STRONG><a name="[1f8]"></a>rfalIsoDepGetTransceiveStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepGetTransceiveStatus))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[14b]"></a>rfalIsoDepInitialize</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[22d]"></a>rfalIsoDepIsRats</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepIsRats))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[1fc]"></a>rfalIsoDepListenGetActivationStatus</STRONG> (Thumb, 336 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepListenGetActivationStatus))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[1fd]"></a>rfalIsoDepListenStartActivation</STRONG> (Thumb, 318 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepListenStartActivation))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[1fe]"></a>rfalIsoDepPollAGetActivationStatus</STRONG> (Thumb, 442 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepPollAGetActivationStatus))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetFDTPoll
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartRATS
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartPPS
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepSFGI2SFGT
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetRATSStatus
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetPPSSTatus
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[205]"></a>rfalIsoDepPollAStartActivation</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepPollAStartActivation))
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartRATS
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[206]"></a>rfalIsoDepPollBGetActivationStatus</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepPollBGetActivationStatus))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetATTRIBStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[207]"></a>rfalIsoDepPollBStartActivation</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepPollBStartActivation))
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbTR2ToFDT
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartATTRIB
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepSFGI2SFGT
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[195]"></a>rfalIsoDepStartApduTransceive</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepStartApduTransceive))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerCheckPresence
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TTransceiveTxRx
</UL>

<P><STRONG><a name="[1f9]"></a>rfalIsoDepStartTransceive</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepStartTransceive))
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[22b]"></a>rfalListenGetState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalListenGetState))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[20b]"></a>rfalListenSetState</STRONG> (Thumb, 518 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalListenSetState))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetBitrate
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearAndEnableInterrupts
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsExtFieldOn
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[20f]"></a>rfalListenSleepStart</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalListenSleepStart))
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearAndEnableInterrupts
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsExtFieldOn
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[211]"></a>rfalListenStart</STRONG> (Thumb, 502 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalListenStart))
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemTSN
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemF
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMem
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[210]"></a>rfalListenStop</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalListenStop))
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[143]"></a>rfalNfcDataExchangeGetStatus</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcDataExchangeGetStatus))
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
</UL>

<P><STRONG><a name="[142]"></a>rfalNfcDataExchangeStart</STRONG> (Thumb, 390 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcDataExchangeStart))
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartPduTransceive
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
</UL>

<P><STRONG><a name="[11f]"></a>rfalNfcDeactivate</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcDeactivate))
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[21c]"></a>rfalNfcDepATR</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepATR))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipConfig
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[222]"></a>rfalNfcDepCalculateRWT</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepCalculateRWT))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[219]"></a>rfalNfcDepDSL</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepDSL))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
</UL>

<P><STRONG><a name="[216]"></a>rfalNfcDepGetPduTransceiveStatus</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepGetPduTransceiveStatus))
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPdu2BLockParam
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
</UL>

<P><STRONG><a name="[21e]"></a>rfalNfcDepGetTransceiveStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepGetTransceiveStatus))
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
</UL>

<P><STRONG><a name="[21d]"></a>rfalNfcDepInitialize</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
</UL>

<P><STRONG><a name="[221]"></a>rfalNfcDepInitiatorHandleActivation</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepInitiatorHandleActivation))
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepCalculateRWT
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
</UL>

<P><STRONG><a name="[228]"></a>rfalNfcDepIsAtrReq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepIsAtrReq))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[226]"></a>rfalNfcDepListenGetActivationStatus</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepListenGetActivationStatus))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleActivation
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[227]"></a>rfalNfcDepListenStartActivation</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepListenStartActivation))
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepIsAtrReq
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
</UL>

<P><STRONG><a name="[224]"></a>rfalNfcDepPSL</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepPSL))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[21a]"></a>rfalNfcDepRLS</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepRLS))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
</UL>

<P><STRONG><a name="[217]"></a>rfalNfcDepStartPduTransceive</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepStartPduTransceive))
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPdu2BLockParam
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
</UL>

<P><STRONG><a name="[220]"></a>rfalNfcDepStartTransceive</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepStartTransceive))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipSetDEPParams
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartPduTransceive
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
</UL>

<P><STRONG><a name="[120]"></a>rfalNfcDiscover</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcDiscover))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[11e]"></a>rfalNfcGetActiveDevice</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcGetActiveDevice))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[11d]"></a>rfalNfcGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcGetState))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[12e]"></a>rfalNfcInitialize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalAnalogConfigInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
</UL>

<P><STRONG><a name="[11b]"></a>rfalNfcWorker</STRONG> (Thumb, 446 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcWorker))
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeHasWoke
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenGetState
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[22c]"></a>rfalNfcaListenerIsSleepReq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_nfca.o(i.rfalNfcaListenerIsSleepReq))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[127]"></a>rfalNfcaPollerCheckPresence</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rfal_nfca.o(i.rfalNfcaPollerCheckPresence))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetFullCollisionResolutionStatus
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[235]"></a>rfalNfcaPollerGetFullCollisionResolutionStatus</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, rfal_nfca.o(i.rfalNfcaPollerGetFullCollisionResolutionStatus))
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartSingleCollisionResolution
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[230]"></a>rfalNfcaPollerInitialize</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rfal_nfca.o(i.rfalNfcaPollerInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[126]"></a>rfalNfcaPollerSelect</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, rfal_nfca.o(i.rfalNfcaPollerSelect))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaCalculateBcc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[123]"></a>rfalNfcaPollerSleep</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rfal_nfca.o(i.rfalNfcaPollerSleep))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetFullCollisionResolutionStatus
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[236]"></a>rfalNfcaPollerStartFullCollisionResolution</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, rfal_nfca.o(i.rfalNfcaPollerStartFullCollisionResolution))
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartSingleCollisionResolution
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[23d]"></a>rfalNfcaPollerTechnologyDetection</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rfal_nfca.o(i.rfalNfcaPollerTechnologyDetection))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[12a]"></a>rfalNfcbPollerCheckPresence</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbPollerCheckPresence))
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerTechnologyDetection
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[237]"></a>rfalNfcbPollerCollisionResolution</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbPollerCollisionResolution))
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[231]"></a>rfalNfcbPollerInitialize</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbPollerInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[128]"></a>rfalNfcbPollerSleep</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbPollerSleep))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[24b]"></a>rfalNfcbPollerSlotMarker</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbPollerSlotMarker))
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
</UL>

<P><STRONG><a name="[24a]"></a>rfalNfcbPollerSlottedCollisionResolution</STRONG> (Thumb, 468 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbPollerSlottedCollisionResolution))
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
</UL>

<P><STRONG><a name="[23e]"></a>rfalNfcbPollerTechnologyDetection</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbPollerTechnologyDetection))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[208]"></a>rfalNfcbTR2ToFDT</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbTR2ToFDT))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
</UL>

<P><STRONG><a name="[190]"></a>rfalNfcfPollerCheck</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, rfal_nfcf.o(i.rfalNfcfPollerCheck))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadBlocks
</UL>

<P><STRONG><a name="[23f]"></a>rfalNfcfPollerCheckPresence</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rfal_nfcf.o(i.rfalNfcfPollerCheckPresence))
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[238]"></a>rfalNfcfPollerCollisionResolution</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, rfal_nfcf.o(i.rfalNfcfPollerCollisionResolution))
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[225]"></a>rfalNfcfPollerInitialize</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rfal_nfcf.o(i.rfalNfcfPollerInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[12b]"></a>rfalNfcfPollerPoll</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_nfcf.o(i.rfalNfcfPollerPoll))
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerTagFormat
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerNdefDetect
</UL>

<P><STRONG><a name="[192]"></a>rfalNfcfPollerUpdate</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, rfal_nfcf.o(i.rfalNfcfPollerUpdate))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteBlocks
</UL>

<P><STRONG><a name="[240]"></a>rfalNfcvPollerCheckPresence</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerCheckPresence))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[239]"></a>rfalNfcvPollerCollisionResolution</STRONG> (Thumb, 372 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerCollisionResolution))
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOFAnticollision
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[1a8]"></a>rfalNfcvPollerExtendedGetSystemInformation</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerExtendedGetSystemInformation))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TGetSystemInformation
</UL>

<P><STRONG><a name="[1af]"></a>rfalNfcvPollerExtendedReadMultipleBlocks</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerExtendedReadMultipleBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadMultipleBlocks
</UL>

<P><STRONG><a name="[1b2]"></a>rfalNfcvPollerExtendedReadSingleBlock</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerExtendedReadSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadSingleBlock
</UL>

<P><STRONG><a name="[1b7]"></a>rfalNfcvPollerExtendedWriteSingleBlock</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerExtendedWriteSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteSingleBlock
</UL>

<P><STRONG><a name="[1a9]"></a>rfalNfcvPollerGetSystemInformation</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerGetSystemInformation))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TGetSystemInformation
</UL>

<P><STRONG><a name="[232]"></a>rfalNfcvPollerInitialize</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[12c]"></a>rfalNfcvPollerInventory</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerInventory))
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCheckPresence
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[1ae]"></a>rfalNfcvPollerReadMultipleBlocks</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerReadMultipleBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadMultipleBlocks
</UL>

<P><STRONG><a name="[1b1]"></a>rfalNfcvPollerReadSingleBlock</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerReadSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadSingleBlock
</UL>

<P><STRONG><a name="[1ab]"></a>rfalNfcvPollerSelect</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerSelect))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerContextInitialization
</UL>

<P><STRONG><a name="[24d]"></a>rfalNfcvPollerTransceiveReq</STRONG> (Thumb, 312 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerTransceiveReq))
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOF
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvParseError
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerWriteSingleBlock
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerSelect
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadSingleBlock
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadMultipleBlocks
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerGetSystemInformation
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedWriteSingleBlock
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedReadSingleBlock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedReadMultipleBlocks
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedGetSystemInformation
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRWriteSingleBlock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRReadSingleBlock
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRReadMultipleBlocks
</UL>

<P><STRONG><a name="[1b6]"></a>rfalNfcvPollerWriteSingleBlock</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvPollerWriteSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteSingleBlock
</UL>

<P><STRONG><a name="[1ad]"></a>rfalST25xVPollerM24LRReadMultipleBlocks</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rfal_st25xv.o(i.rfalST25xVPollerM24LRReadMultipleBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadMultipleBlocks
</UL>

<P><STRONG><a name="[1b0]"></a>rfalST25xVPollerM24LRReadSingleBlock</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rfal_st25xv.o(i.rfalST25xVPollerM24LRReadSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadSingleBlock
</UL>

<P><STRONG><a name="[1b5]"></a>rfalST25xVPollerM24LRWriteSingleBlock</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, rfal_st25xv.o(i.rfalST25xVPollerM24LRWriteSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteSingleBlock
</UL>

<P><STRONG><a name="[1db]"></a>rfalSetAnalogConfig</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, rfal_analogconfig.o(i.rfalSetAnalogConfig))
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeTestRegBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalAnalogConfigSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[1c3]"></a>rfalSetBitRate</STRONG> (Thumb, 556 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalSetBitRate))
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693PhyConfigure
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916StreamConfigure
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetBitrate
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleActivation
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBGetActivationStatus
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenGetActivationStatus
</UL>

<P><STRONG><a name="[1d8]"></a>rfalSetErrorHandling</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalSetErrorHandling))
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyRegister
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAStartActivation
</UL>

<P><STRONG><a name="[23c]"></a>rfalSetFDTListen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalSetFDTListen))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[209]"></a>rfalSetFDTPoll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalSetFDTPoll))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
</UL>

<P><STRONG><a name="[200]"></a>rfalSetGT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalSetGT))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBGetActivationStatus
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[20e]"></a>rfalSetMode</STRONG> (Thumb, 472 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalSetMode))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetStartGPTimer
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenGetActivationStatus
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[241]"></a>rfalSt25tbPollerCheckPresence</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rfal_st25tb.o(i.rfalSt25tbPollerCheckPresence))
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[23a]"></a>rfalSt25tbPollerCollisionResolution</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, rfal_st25tb.o(i.rfalSt25tbPollerCollisionResolution))
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerGetUID
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[25b]"></a>rfalSt25tbPollerGetUID</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rfal_st25tb.o(i.rfalSt25tbPollerGetUID))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
</UL>

<P><STRONG><a name="[233]"></a>rfalSt25tbPollerInitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rfal_st25tb.o(i.rfalSt25tbPollerInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[259]"></a>rfalSt25tbPollerInitiate</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rfal_st25tb.o(i.rfalSt25tbPollerInitiate))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
</UL>

<P><STRONG><a name="[25e]"></a>rfalSt25tbPollerPcall</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rfal_st25tb.o(i.rfalSt25tbPollerPcall))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
</UL>

<P><STRONG><a name="[25a]"></a>rfalSt25tbPollerSelect</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, rfal_st25tb.o(i.rfalSt25tbPollerSelect))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
</UL>

<P><STRONG><a name="[25d]"></a>rfalSt25tbPollerSlotMarker</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, rfal_st25tb.o(i.rfalSt25tbPollerSlotMarker))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
</UL>

<P><STRONG><a name="[153]"></a>rfalStartTransceive</STRONG> (Thumb, 410 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalStartTransceive))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetNoResponseTime
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartRATS
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartPPS
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartATTRIB
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
</UL>

<P><STRONG><a name="[247]"></a>rfalT1TPollerInitialize</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rfal_t1t.o(i.rfalT1TPollerInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartFullCollisionResolution
</UL>

<P><STRONG><a name="[248]"></a>rfalT1TPollerRid</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, rfal_t1t.o(i.rfalT1TPollerRid))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartFullCollisionResolution
</UL>

<P><STRONG><a name="[18a]"></a>rfalT2TPollerRead</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, rfal_t2t.o(i.rfalT2TPollerRead))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBlock
</UL>

<P><STRONG><a name="[189]"></a>rfalT2TPollerSectorSelect</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, rfal_t2t.o(i.rfalT2TPollerSectorSelect))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBlock
</UL>

<P><STRONG><a name="[18c]"></a>rfalT2TPollerWrite</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, rfal_t2t.o(i.rfalT2TPollerWrite))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBlock
</UL>

<P><STRONG><a name="[25f]"></a>rfalT4TPollerComposeCAPDU</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, rfal_t4t.o(i.rfalT4TPollerComposeCAPDU))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeWriteDataODO
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeWriteData
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectFileV1Mapping
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectFile
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectAppl
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeReadDataODO
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeReadData
</UL>

<P><STRONG><a name="[194]"></a>rfalT4TPollerComposeReadData</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rfal_t4t.o(i.rfalT4TPollerComposeReadData))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeCAPDU
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerCheckPresence
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
</UL>

<P><STRONG><a name="[19e]"></a>rfalT4TPollerComposeReadDataODO</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, rfal_t4t.o(i.rfalT4TPollerComposeReadDataODO))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeCAPDU
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinaryODO
</UL>

<P><STRONG><a name="[1a1]"></a>rfalT4TPollerComposeSelectAppl</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rfal_t4t.o(i.rfalT4TPollerComposeSelectAppl))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeCAPDU
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectNdefTagApplication
</UL>

<P><STRONG><a name="[1a0]"></a>rfalT4TPollerComposeSelectFile</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rfal_t4t.o(i.rfalT4TPollerComposeSelectFile))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeCAPDU
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
</UL>

<P><STRONG><a name="[19f]"></a>rfalT4TPollerComposeSelectFileV1Mapping</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rfal_t4t.o(i.rfalT4TPollerComposeSelectFileV1Mapping))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeCAPDU
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
</UL>

<P><STRONG><a name="[1a3]"></a>rfalT4TPollerComposeWriteData</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rfal_t4t.o(i.rfalT4TPollerComposeWriteData))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeCAPDU
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinary
</UL>

<P><STRONG><a name="[1a5]"></a>rfalT4TPollerComposeWriteDataODO</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, rfal_t4t.o(i.rfalT4TPollerComposeWriteDataODO))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeCAPDU
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinaryODO
</UL>

<P><STRONG><a name="[1a6]"></a>rfalT4TPollerParseRAPDU</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rfal_t4t.o(i.rfalT4TPollerParseRAPDU))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TTransceiveTxRx
</UL>

<P><STRONG><a name="[1bc]"></a>rfalTransceiveBlockingRx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalTransceiveBlockingRx))
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInRx
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>

<P><STRONG><a name="[151]"></a>rfalTransceiveBlockingTx</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalTransceiveBlockingTx))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenGetActivationStatus
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenStartActivation
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenGetActivationStatus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[1ee]"></a>rfalTransceiveBlockingTxRx</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalTransceiveBlockingTxRx))
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerPcall
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerGetUID
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOF
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerUpdate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerWrite
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerSectorSelect
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerRead
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSlotMarker
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSelect
</UL>

<P><STRONG><a name="[243]"></a>rfalWakeUpModeHasWoke</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalWakeUpModeHasWoke))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[242]"></a>rfalWakeUpModeStart</STRONG> (Thumb, 668 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalWakeUpModeStart))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasurePhase
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureCapacitance
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureAmplitude
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CalibrateCapacitiveSensor
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[21b]"></a>rfalWakeUpModeStop</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalWakeUpModeStop))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[196]"></a>rfalWorker</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalWorker))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInRx
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInTx
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerCheckPresence
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TTransceiveTxRx
</UL>

<P><STRONG><a name="[1c7]"></a>st25r3916AdjustRegulators</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916AdjustRegulators))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>

<P><STRONG><a name="[265]"></a>st25r3916CalibrateCapacitiveSensor</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916CalibrateCapacitiveSensor))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[1ca]"></a>st25r3916ChangeRegisterBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916ChangeRegisterBits))
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916StreamConfigure
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetStartGPTimer
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetNoResponseTime
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasurePowerSupply
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[1cc]"></a>st25r3916ChangeTestRegisterBits</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916ChangeTestRegisterBits))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadTestRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeTestRegBits
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
</UL>

<P><STRONG><a name="[269]"></a>st25r3916CheckChipID</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916CheckChipID))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
</UL>

<P><STRONG><a name="[26a]"></a>st25r3916CheckForReceivedInterrupts</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, st25r3916_irq.o(i.st25r3916CheckForReceivedInterrupts))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtIrq
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Isr
</UL>

<P><STRONG><a name="[1c6]"></a>st25r3916CheckReg</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916CheckReg))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916AdjustRegulators
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsExtFieldOn
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[20c]"></a>st25r3916ClearAndEnableInterrupts</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, st25r3916_irq.o(i.st25r3916ClearAndEnableInterrupts))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[1f2]"></a>st25r3916ClearInterrupts</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, st25r3916_irq.o(i.st25r3916ClearInterrupts))
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
</UL>

<P><STRONG><a name="[1ce]"></a>st25r3916ClrRegisterBits</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916ClrRegisterBits))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CalibrateCapacitiveSensor
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916AdjustRegulators
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
</UL>

<P><STRONG><a name="[1e4]"></a>st25r3916DisableInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st25r3916_irq.o(i.st25r3916DisableInterrupts))
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[1e1]"></a>st25r3916EnableInterrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st25r3916_irq.o(i.st25r3916EnableInterrupts))
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearAndEnableInterrupts
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[1d9]"></a>st25r3916ExecuteCommand</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916ExecuteCommand))
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtCmd
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetStartGPTimer
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[267]"></a>st25r3916ExecuteCommandAndGetResult</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916ExecuteCommandAndGetResult))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasurePowerSupply
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasurePhase
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureCapacitance
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureAmplitude
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CalibrateCapacitiveSensor
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916AdjustRegulators
</UL>

<P><STRONG><a name="[1e0]"></a>st25r3916GetInterrupt</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, st25r3916_irq.o(i.st25r3916GetInterrupt))
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearAndEnableInterrupts
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[250]"></a>st25r3916GetNumFIFOBytes</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916GetNumFIFOBytes))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[273]"></a>st25r3916InitInterrupts</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, st25r3916_irq.o(i.st25r3916InitInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
</UL>

<P><STRONG><a name="[1f1]"></a>st25r3916Initialize</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916Initialize))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledInit
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916InitInterrupts
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureVoltage
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckChipID
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearInterrupts
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeTestRegisterBits
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[1c9]"></a>st25r3916IsRegValid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916IsRegValid))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
</UL>

<P><STRONG><a name="[d9]"></a>st25r3916Isr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, st25r3916_irq.o(i.st25r3916Isr))
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_IRQ_Callback
</UL>

<P><STRONG><a name="[252]"></a>st25r3916MeasureAmplitude</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916MeasureAmplitude))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
</UL>

<P><STRONG><a name="[266]"></a>st25r3916MeasureCapacitance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916MeasureCapacitance))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[254]"></a>st25r3916MeasurePhase</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916MeasurePhase))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
</UL>

<P><STRONG><a name="[276]"></a>st25r3916MeasurePowerSupply</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916MeasurePowerSupply))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureVoltage
</UL>

<P><STRONG><a name="[275]"></a>st25r3916MeasureVoltage</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916MeasureVoltage))
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasurePowerSupply
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
</UL>

<P><STRONG><a name="[26e]"></a>st25r3916ModifyInterrupts</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, st25r3916_irq.o(i.st25r3916ModifyInterrupts))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
</UL>

<P><STRONG><a name="[258]"></a>st25r3916ModifyRegister</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916ModifyRegister))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>

<P><STRONG><a name="[215]"></a>st25r3916OscOn</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916OscOn))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
</UL>

<P><STRONG><a name="[1de]"></a>st25r3916PerformCollisionAvoidance</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916PerformCollisionAvoidance))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[1d3]"></a>st25r3916ReadFifo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916ReadFifo))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comRx
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[1d6]"></a>st25r3916ReadMultipleRegisters</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916ReadMultipleRegisters))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comRx
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearInterrupts
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>

<P><STRONG><a name="[1e3]"></a>st25r3916ReadRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916ReadRegister))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckChipID
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetBitrate
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyRegister
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetNumFIFOBytes
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[268]"></a>st25r3916ReadTestRegister</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916ReadTestRegister))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comRx
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeTestRegisterBits
</UL>

<P><STRONG><a name="[20d]"></a>st25r3916SetBitrate</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916SetBitrate))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[278]"></a>st25r3916SetGPTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916SetGPTime))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetStartGPTimer
</UL>

<P><STRONG><a name="[1e7]"></a>st25r3916SetNoResponseTime</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916SetNoResponseTime))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>

<P><STRONG><a name="[263]"></a>st25r3916SetNumTxBits</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916SetNumTxBits))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[1cf]"></a>st25r3916SetRegisterBits</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916SetRegisterBits))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916AdjustRegulators
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
</UL>

<P><STRONG><a name="[1e8]"></a>st25r3916SetStartGPTimer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916SetStartGPTimer))
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetGPTime
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[257]"></a>st25r3916StreamConfigure</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, st25r3916.o(i.st25r3916StreamConfigure))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[1eb]"></a>st25r3916WaitForInterruptsTimed</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, st25r3916_irq.o(i.st25r3916WaitForInterruptsTimed))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
</UL>

<P><STRONG><a name="[264]"></a>st25r3916WriteFifo</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916WriteFifo))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[27a]"></a>st25r3916WriteMultipleRegisters</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916WriteMultipleRegisters))
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtWrMultiReg
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
</UL>

<P><STRONG><a name="[212]"></a>st25r3916WritePTMem</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916WritePTMem))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
</UL>

<P><STRONG><a name="[213]"></a>st25r3916WritePTMemF</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916WritePTMemF))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
</UL>

<P><STRONG><a name="[214]"></a>st25r3916WritePTMemTSN</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916WritePTMemTSN))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
</UL>

<P><STRONG><a name="[1dd]"></a>st25r3916WriteRegister</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916WriteRegister))
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyInterrupts
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetGPTime
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916StreamConfigure
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetNumTxBits
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetNoResponseTime
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetBitrate
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyRegister
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
</UL>

<P><STRONG><a name="[1ea]"></a>st25r3916WriteTestRegister</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916WriteTestRegister))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeTestRegisterBits
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[272]"></a>st25r3916ledEvtCmd</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, st25r3916_led.o(i.st25r3916ledEvtCmd))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
</UL>

<P><STRONG><a name="[26d]"></a>st25r3916ledEvtIrq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, st25r3916_led.o(i.st25r3916ledEvtIrq))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
</UL>

<P><STRONG><a name="[27b]"></a>st25r3916ledEvtWrMultiReg</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, st25r3916_led.o(i.st25r3916ledEvtWrMultiReg))
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtWrReg
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteMultipleRegisters
</UL>

<P><STRONG><a name="[27c]"></a>st25r3916ledEvtWrReg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, st25r3916_led.o(i.st25r3916ledEvtWrReg))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtWrMultiReg
</UL>

<P><STRONG><a name="[274]"></a>st25r3916ledInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, st25r3916_led.o(i.st25r3916ledInit))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
</UL>

<P><STRONG><a name="[119]"></a>timerCalculateTimer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.timerCalculateTimer))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkUserButton
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[11c]"></a>timerIsExpired</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(i.timerIsExpired))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5f]"></a>SPI1_MspDeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, nucleo_l476rg_bus.o(i.SPI1_MspDeInit))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nucleo_l476rg_bus.o(i.BSP_SPI1_RegisterDefaultMspCallbacks)
</UL>
<P><STRONG><a name="[5e]"></a>SPI1_MspInit</STRONG> (Thumb, 250 bytes, Stack size 0 bytes, nucleo_l476rg_bus.o(i.SPI1_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_RegisterCallback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_GetHandle
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nucleo_l476rg_bus.o(i.BSP_SPI1_RegisterDefaultMspCallbacks)
</UL>
<P><STRONG><a name="[fa]"></a>LedNotificationWriteDone</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ndef_demo.o(i.LedNotificationWriteDone))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledsOn
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledsOff
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[116]"></a>checkUserButton</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, ndef_demo.o(i.checkUserButton))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[122]"></a>demoNdef</STRONG> (Thumb, 620 bytes, Stack size 0 bytes, ndef_demo.o(i.demoNdef))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriToRecord
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUri
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextToRecord
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdText
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAarToRecord
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAar
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteRawMessage
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerTagFormat
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerReadRawMessage
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerNdefDetect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerContextInitialization
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageEncode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDump
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDecode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageAppend
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDump
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefDumpSysInfo
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefCCDump
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedNotificationWriteDone
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[125]"></a>demoP2P</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, ndef_demo.o(i.demoP2P))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriToRecord
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUri
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageEncode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageAppend
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDump
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[fc]"></a>ledsOff</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ndef_demo.o(i.ledsOff))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedNotificationWriteDone
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[fb]"></a>ledsOn</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ndef_demo.o(i.ledsOn))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedNotificationWriteDone
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[132]"></a>ndefCCDump</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, ndef_demo.o(i.ndefCCDump))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDump
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TCCDump
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TCCDump
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[130]"></a>ndefDumpSysInfo</STRONG> (Thumb, 1598 bytes, Stack size 0 bytes, ndef_demo.o(i.ndefDumpSysInfo))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[15b]"></a>ndefT4TCCDump</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ndef_demo.o(i.ndefT4TCCDump))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDump
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefCCDump
</UL>

<P><STRONG><a name="[15a]"></a>ndefT5TCCDump</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, ndef_demo.o(i.ndefT5TCCDump))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDump
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefCCDump
</UL>

<P><STRONG><a name="[159]"></a>ndefBufferDumpLine</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefBufferDumpLine))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDump
</UL>

<P><STRONG><a name="[160]"></a>ndefMediaVCardTranslate</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ndef_dump.o(i.ndefMediaVCardTranslate))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaVCardDump
</UL>

<P><STRONG><a name="[255]"></a>rfalAnalogConfigSearch</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, rfal_analogconfig.o(i.rfalAnalogConfigSearch))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[6b]"></a>iso15693PhyVCDCode1Of256</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of256))
<BR>[Address Reference Count : 1]<UL><LI> rfal_iso15693_2.o(i.iso15693VCDCode)
</UL>
<P><STRONG><a name="[6c]"></a>iso15693PhyVCDCode1Of4</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of4))
<BR>[Address Reference Count : 1]<UL><LI> rfal_iso15693_2.o(i.iso15693VCDCode)
</UL>
<P><STRONG><a name="[14c]"></a>isoDepClearCounters</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_isodep.o(i.isoDepClearCounters))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>

<P><STRONG><a name="[147]"></a>isoDepDataExchangePCD</STRONG> (Thumb, 626 bytes, Stack size 0 bytes, rfal_isodep.o(i.isoDepDataExchangePCD))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[14e]"></a>isoDepDataExchangePICC</STRONG> (Thumb, 818 bytes, Stack size 0 bytes, rfal_isodep.o(i.isoDepDataExchangePICC))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInRx
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepReSendControlMsg
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
</UL>

<P><STRONG><a name="[14a]"></a>isoDepHandleControlMsg</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, rfal_isodep.o(i.isoDepHandleControlMsg))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepReSendControlMsg
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[152]"></a>isoDepReSendControlMsg</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rfal_isodep.o(i.isoDepReSendControlMsg))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[148]"></a>isoDepTx</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, rfal_isodep.o(i.isoDepTx))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>

<P><STRONG><a name="[1f4]"></a>rfalIsoDepApdu2IBLockParam</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepApdu2IBLockParam))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetMaxInfLen
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[202]"></a>rfalIsoDepCalcBitRate</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepCalcBitRate))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[1f6]"></a>rfalIsoDepGetATTRIBStatus</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepGetATTRIBStatus))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBGetActivationStatus
</UL>

<P><STRONG><a name="[1fa]"></a>rfalIsoDepGetPPSSTatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepGetPPSSTatus))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[1fb]"></a>rfalIsoDepGetRATSStatus</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepGetRATSStatus))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[203]"></a>rfalIsoDepSFGI2SFGT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepSFGI2SFGT))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[20a]"></a>rfalIsoDepStartATTRIB</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepStartATTRIB))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
</UL>

<P><STRONG><a name="[204]"></a>rfalIsoDepStartPPS</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepStartPPS))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[201]"></a>rfalIsoDepStartRATS</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepStartRATS))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAStartActivation
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[218]"></a>rfalNfcDeactivation</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcDeactivation))
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepRLS
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepDSL
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivate
</UL>

<P><STRONG><a name="[22a]"></a>rfalNfcListenActivation</STRONG> (Thumb, 482 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcListenActivation))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaListenerIsSleepReq
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenGetActivationStatus
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepIsAtrReq
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenGetState
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenStartActivation
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenGetActivationStatus
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepIsRats
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[22e]"></a>rfalNfcNfcDepActivate</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcNfcDepActivate))
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[22f]"></a>rfalNfcPollActivation</STRONG> (Thumb, 474 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcPollActivation))
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBGetActivationStatus
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAStartActivation
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[234]"></a>rfalNfcPollCollResolution</STRONG> (Thumb, 942 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcPollCollResolution))
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartFullCollisionResolution
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetFullCollisionResolutionStatus
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[23b]"></a>rfalNfcPollTechDetetection</STRONG> (Thumb, 504 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcPollTechDetetection))
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCheckPresence
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerTechnologyDetection
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[246]"></a>rfalNfcaCalculateBcc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rfal_nfca.o(i.rfalNfcaCalculateBcc))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
</UL>

<P><STRONG><a name="[244]"></a>rfalNfcaPollerGetSingleCollisionResolutionStatus</STRONG> (Thumb, 618 bytes, Stack size 0 bytes, rfal_nfca.o(i.rfalNfcaPollerGetSingleCollisionResolutionStatus))
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaCalculateBcc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetFullCollisionResolutionStatus
</UL>

<P><STRONG><a name="[245]"></a>rfalNfcaPollerStartSingleCollisionResolution</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rfal_nfca.o(i.rfalNfcaPollerStartSingleCollisionResolution))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartFullCollisionResolution
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetFullCollisionResolutionStatus
</UL>

<P><STRONG><a name="[249]"></a>rfalNfcbCheckSensbRes</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbCheckSensbRes))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
</UL>

<P><STRONG><a name="[1be]"></a>nfcipClearCounters</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipClearCounters))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipSetDEPParams
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
</UL>

<P><STRONG><a name="[1b8]"></a>nfcipConfig</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipConfig))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
</UL>

<P><STRONG><a name="[1b9]"></a>nfcipDEPControlMsg</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipDEPControlMsg))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
</UL>

<P><STRONG><a name="[1bb]"></a>nfcipDataRx</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipDataRx))
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleActivation
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[1bd]"></a>nfcipInitiatorHandleDEP</STRONG> (Thumb, 612 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipInitiatorHandleDEP))
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[1bf]"></a>nfcipRun</STRONG> (Thumb, 320 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipRun))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
</UL>

<P><STRONG><a name="[1c1]"></a>nfcipSetDEPParams</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipSetDEPParams))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
</UL>

<P><STRONG><a name="[1c2]"></a>nfcipTargetHandleActivation</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipTargetHandleActivation))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenGetActivationStatus
</UL>

<P><STRONG><a name="[1c0]"></a>nfcipTargetHandleRX</STRONG> (Thumb, 854 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipTargetHandleRX))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[1ba]"></a>nfcipTx</STRONG> (Thumb, 378 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipTx))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleActivation
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
</UL>

<P><STRONG><a name="[1c4]"></a>nfcipTxRx</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipTxRx))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepRLS
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepDSL
</UL>

<P><STRONG><a name="[21f]"></a>rfalNfcDepPdu2BLockParam</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepPdu2BLockParam))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartPduTransceive
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
</UL>

<P><STRONG><a name="[24c]"></a>rfalNfcfComputeValidSENF</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, rfal_nfcf.o(i.rfalNfcfComputeValidSENF))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
</UL>

<P><STRONG><a name="[24e]"></a>rfalNfcvParseError</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvParseError))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[25c]"></a>rfalSt25tbPollerDoCollisionResolution</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, rfal_st25tb.o(i.rfalSt25tbPollerDoCollisionResolution))
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerPcall
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerGetUID
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSlotMarker
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
</UL>

<P><STRONG><a name="[1cd]"></a>rfalCleanupTransceive</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalCleanupTransceive))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[1d0]"></a>rfalErrorHandling</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalErrorHandling))
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusGetNumBytes
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOGetNumIncompleteBits
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[1d4]"></a>rfalFIFOGetNumIncompleteBits</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalFIFOGetNumIncompleteBits))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[1d1]"></a>rfalFIFOStatusGetNumBytes</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalFIFOStatusGetNumBytes))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[1d2]"></a>rfalFIFOStatusIsIncompleteByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalFIFOStatusIsIncompleteByte))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[1d5]"></a>rfalFIFOStatusUpdate</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalFIFOStatusUpdate))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusGetNumBytes
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOGetNumIncompleteBits
</UL>

<P><STRONG><a name="[1e9]"></a>rfalPrepareTransceive</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalPrepareTransceive))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetStartGPTimer
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[24f]"></a>rfalRunListenModeWorker</STRONG> (Thumb, 856 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalRunListenModeWorker))
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetNumFIFOBytes
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[251]"></a>rfalRunWakeUpModeWorker</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalRunWakeUpModeWorker))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasurePhase
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureAmplitude
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[1e2]"></a>rfalTransceiveRunBlockingTx</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalTransceiveRunBlockingTx))
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInRx
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>

<P><STRONG><a name="[261]"></a>rfalTransceiveRx</STRONG> (Thumb, 974 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalTransceiveRx))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusGetNumBytes
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOGetNumIncompleteBits
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[262]"></a>rfalTransceiveTx</STRONG> (Thumb, 632 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalTransceiveTx))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VCDCode
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteFifo
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetNumTxBits
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsExtFieldOn
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[253]"></a>rfalWakeUpModeFilter</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalWakeUpModeFilter))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
</UL>

<P><STRONG><a name="[277]"></a>st25r3916comRx</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916comRx))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadTestRegister
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
</UL>

<P><STRONG><a name="[26f]"></a>st25r3916comStart</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916comStart))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemTSN
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemF
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMem
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteMultipleRegisters
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteFifo
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadTestRegister
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
</UL>

<P><STRONG><a name="[271]"></a>st25r3916comStop</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916comStop))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemTSN
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemF
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMem
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteMultipleRegisters
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteFifo
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadTestRegister
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
</UL>

<P><STRONG><a name="[279]"></a>st25r3916comTx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916comTx))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemTSN
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemF
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMem
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteMultipleRegisters
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteFifo
</UL>

<P><STRONG><a name="[270]"></a>st25r3916comTxByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916comTxByte))
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemTSN
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemF
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMem
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteMultipleRegisters
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteFifo
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadTestRegister
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
</UL>

<P><STRONG><a name="[26b]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, st25r3916_irq.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearInterrupts
</UL>

<P><STRONG><a name="[26c]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, st25r3916_irq.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearInterrupts
</UL>

<P><STRONG><a name="[e9]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[f0]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[eb]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ec]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 250 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI2_Config))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[f2]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[108]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[f1]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[182]"></a>ndefTypeStringToTypeId</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, ndef_types.o(i.ndefTypeStringToTypeId))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeStringToTypeId
</UL>

<P><STRONG><a name="[15f]"></a>ndefIsVCardTypeFound</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ndef_types_mime.o(i.ndefIsVCardTypeFound))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPayloadToVcard
</UL>

<P><STRONG><a name="[168]"></a>ndefPayloadToVcard</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, ndef_types_mime.o(i.ndefPayloadToVcard))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefVCardParseLine
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefVCardFindMarker
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefIsVCardTypeFound
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToVCard
</UL>

<P><STRONG><a name="[169]"></a>ndefVCardFindMarker</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ndef_types_mime.o(i.ndefVCardFindMarker))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefVCardParseLine
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPayloadToVcard
</UL>

<P><STRONG><a name="[16a]"></a>ndefVCardParseLine</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, ndef_types_mime.o(i.ndefVCardParseLine))
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefVCardFindMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPayloadToVcard
</UL>

<P><STRONG><a name="[71]"></a>ndefVCardPayloadGetLength</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ndef_types_mime.o(i.ndefVCardPayloadGetLength))
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_mime.o(i.ndefPayloadToVcard)
</UL>
<P><STRONG><a name="[72]"></a>ndefVCardToPayloadItem</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, ndef_types_mime.o(i.ndefVCardToPayloadItem))
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_mime.o(i.ndefPayloadToVcard)
</UL>
<P><STRONG><a name="[6d]"></a>ndefEmptyTypePayloadGetLength</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefEmptyTypePayloadGetLength))
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_rtd.o(i.ndefEmptyType)
</UL>
<P><STRONG><a name="[6e]"></a>ndefEmptyTypePayloadItem</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefEmptyTypePayloadItem))
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_rtd.o(i.ndefEmptyType)
</UL>
<P><STRONG><a name="[180]"></a>ndefPayloadToRtdDeviceInfo</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefPayloadToRtdDeviceInfo))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdDeviceInfo
</UL>

<P><STRONG><a name="[6f]"></a>ndefRtdDeviceInfoPayloadGetLength</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdDeviceInfoPayloadGetLength))
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_rtd.o(i.ndefPayloadToRtdDeviceInfo)
</UL>
<P><STRONG><a name="[70]"></a>ndefRtdDeviceInfoToPayloadItem</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdDeviceInfoToPayloadItem))
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_rtd.o(i.ndefPayloadToRtdDeviceInfo)
</UL>
<P><STRONG><a name="[73]"></a>ndefRtdTextPayloadGetLength</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdTextPayloadGetLength))
<BR>[Address Reference Count : 2]<UL><LI> ndef_types_rtd.o(i.ndefRecordToRtdText)
<LI> ndef_types_rtd.o(i.ndefRtdText)
</UL>
<P><STRONG><a name="[74]"></a>ndefRtdTextToPayloadItem</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdTextToPayloadItem))
<BR>[Address Reference Count : 2]<UL><LI> ndef_types_rtd.o(i.ndefRecordToRtdText)
<LI> ndef_types_rtd.o(i.ndefRtdText)
</UL>
<P><STRONG><a name="[75]"></a>ndefRtdUriPayloadGetLength</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdUriPayloadGetLength))
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_rtd.o(i.ndefRtdUri)
</UL>
<P><STRONG><a name="[186]"></a>ndefRtdUriProtocolAutodetect</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdUriProtocolAutodetect))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUri
</UL>

<P><STRONG><a name="[76]"></a>ndefRtdUriToPayloadItem</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ndef_types_rtd.o(i.ndefRtdUriToPayloadItem))
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_rtd.o(i.ndefRtdUri)
</UL>
<P><STRONG><a name="[188]"></a>ndefT2TPollerReadBlock</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerReadBlock))
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerSectorSelect
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerRead
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBytes
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBytes
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerCheckPresence
</UL>

<P><STRONG><a name="[18b]"></a>ndefT2TPollerWriteBlock</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ndef_t2t.o(i.ndefT2TPollerWriteBlock))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerWrite
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerSectorSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBytes
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerTagFormat
</UL>

<P><STRONG><a name="[18f]"></a>ndefT3TPollerReadAttributeInformationBlock</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerReadAttributeInformationBlock))
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerTagFormat
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerNdefDetect
</UL>

<P><STRONG><a name="[18e]"></a>ndefT3TPollerReadBlocks</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerReadBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteBytes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadBytes
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerCheckPresence
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadAttributeInformationBlock
</UL>

<P><STRONG><a name="[18d]"></a>ndefT3TPollerWriteAttributeInformationBlock</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerWriteAttributeInformationBlock))
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerTagFormat
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerEndWriteMessage
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerBeginWriteMessage
</UL>

<P><STRONG><a name="[191]"></a>ndefT3TPollerWriteBlocks</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ndef_t3t.o(i.ndefT3TPollerWriteBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteBytes
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteAttributeInformationBlock
</UL>

<P><STRONG><a name="[193]"></a>ndefT4TInitializeIsoDepTxRxParam</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TInitializeIsoDepTxRxParam))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerCheckPresence
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinaryODO
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinary
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectNdefTagApplication
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinaryODO
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
</UL>

<P><STRONG><a name="[199]"></a>ndefT4TReadAndParseCCFile</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TReadAndParseCCFile))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerTagFormat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerNdefDetect
</UL>

<P><STRONG><a name="[19c]"></a>ndefT4TTransceiveTxRx</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ndef_t4t.o(i.ndefT4TTransceiveTxRx))
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerParseRAPDU
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinaryODO
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinary
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectNdefTagApplication
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinaryODO
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
</UL>

<P><STRONG><a name="[1a7]"></a>ndefT5TGetSystemInformation</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TGetSystemInformation))
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerGetSystemInformation
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedGetSystemInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerContextInitialization
</UL>

<P><STRONG><a name="[1ac]"></a>ndefT5TPollerReadMultipleBlocks</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerReadMultipleBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadMultipleBlocks
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedReadMultipleBlocks
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRReadMultipleBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerTagFormat
</UL>

<P><STRONG><a name="[1aa]"></a>ndefT5TPollerReadSingleBlock</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerReadSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadSingleBlock
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedReadSingleBlock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRReadSingleBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadBytes
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerContextInitialization
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerCheckPresence
</UL>

<P><STRONG><a name="[1b4]"></a>ndefT5TPollerWriteSingleBlock</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TPollerWriteSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerWriteSingleBlock
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedWriteSingleBlock
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRWriteSingleBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
</UL>

<P><STRONG><a name="[1b3]"></a>ndefT5TWriteCC</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, ndef_t5t.o(i.ndefT5TWriteCC))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerTagFormat
</UL>

<P><STRONG><a name="[16b]"></a>ndefPayloadToWifi</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, ndef_type_wifi.o(i.ndefPayloadToWifi))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefWifi
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToWifi
</UL>

<P><STRONG><a name="[77]"></a>ndefWifiPayloadGetLength</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ndef_type_wifi.o(i.ndefWifiPayloadGetLength))
<BR>[Address Reference Count : 1]<UL><LI> ndef_type_wifi.o(i.ndefWifi)
</UL>
<P><STRONG><a name="[78]"></a>ndefWifiToPayloadItem</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, ndef_type_wifi.o(i.ndefWifiToPayloadItem))
<BR>[Address Reference Count : 1]<UL><LI> ndef_type_wifi.o(i.ndefWifi)
</UL>
<P><STRONG><a name="[111]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 0 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[110]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 0 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[114]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[113]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6a]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
